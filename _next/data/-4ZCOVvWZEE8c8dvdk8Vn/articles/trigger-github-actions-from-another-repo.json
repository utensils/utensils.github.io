{"pageProps":{"article":{"authors":[{"name":"Sean Callan","github":"https://github.com/doomspork"}],"content":"<p>As part of the new <a href=\"https://elixirischool.com\">Elixir School</a> facelift we're splitting the Elixir Phoenix portion of the application out from the translated content.\nIn order to continue down the path of CI/CD we needed to identify a way to trigger the deployment in one repo based on merges in another.\nWe decided it was best to keep things inside GitHub Actions for now.</p>\n<p>Out of the box GitHub does not provide an immediately obvious solution to this problem so after scouring the internet we were finally able to piece together a working solution which we'll document here today.</p>\n<p>Before getting into the nuts and bolts let's review what we want to accomplish:</p>\n<ol>\n<li>For merges to <a href=\"https://github.com/elixirschool/school_house\">school_house</a> deploy to Production. This exists today via the deploy.yml workflow.</li>\n<li>Whenever changes are merged into the content repository, <a href=\"https://github.com/elixirschool/elixirschool\">elixirschool</a>, trigger the aforementioned deployment.</li>\n</ol>\n<p>While GitHub may not provide a solution for this exact problem they do provide a robust API which has everything we'll need.\nTo achieve our goal we'll be relying on the <a href=\"https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/\"><code>workflow_dispatch</code></a> event.</p>\n<h2>Deployment Workflow</h2>\n<p>Let's start by updating our existing deployment workflow to work with this new event.\nThanks to the flexibility of GitHub Actions we won't need to make many changes to our existing deploy script.\nThe minimal change we can make here is adding <code>workflow_dispatch</code> to the <code>on:</code> configuration for our Workflow.\nThis tells GitHub that for any <code>workflow_dispatch</code>, trigger this workflow, which is precisely what we need.</p>\n<p>Let's update our <code>deploy.yml</code>:</p>\n<pre><code>name: Deploy\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - master\n</code></pre>\n<p>Here we're telling GitHub for any <code>workflow_dispatch</code> and for pushes to <code>master</code> we want to trigger this workflow, our deployment.</p>\n<h2>Personal Access Token</h2>\n<p>Before we can trigger our <code>workflow_dispatch</code> even we'll need to generate a Personal Access Token to authenticate our request. Head over to the official GitHub document to see how to <a href=\"https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token\">Create a personal access token</a>.</p>\n<p>We'll need to add this new token to our repository (or organization) secrets. For this example we'll call our secret <code>ACCESS_TOKEN</code>.\nWith that in place we're ready to trigger the workflow</p>\n<h2>External Repository Worflow</h2>\n<p>We've updated our deployment workflow to listen to and trigger on the <code>workflow_dispatch</code> event and we've setup our personal access token so now it's time to tie it all together with a simple cURL request:</p>\n<pre><code> curl -X POST \\\n -H \"Authorization: Bearer ${{secrets.ACCESS_TOKEN}}\" \\\n -H \"Accept: application/vnd.github.v3+json\" \\\n https://api.github.com/repos/&#x3C;YOUR ORG>/&#x3C;YOUR REPO>/actions/workflows/deploy.yml/dispatches \\\n -d '{\"ref\": \"master\"}'\n</code></pre>\n<p>We make an HTTP to the <code>dispatches</code> endpoint of our workflow with our personal access token as the bearer token, the contents of the request body are not important here.\nWith a testing and working cURL command in place we need to create workflow file in our external repository to call it on merge:</p>\n<pre><code>---\nname: Trigger Deploy\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - run: |\n          curl -X POST \\\n          -H \"Authorization: Bearer ${{secrets.ACCESS_TOKEN}}\" \\\n          -H \"Accept: application/vnd.github.v3+json\" \\\n          https://api.github.com/repos/&#x3C;YOUR ORG>/&#x3C;YOUR REPO>/actions/workflows/deploy.yml/dispatches \\\n          -d '{\"ref\": \"master\"}'\n</code></pre>\n<p>That's it! When <code>master</code> is pushed to we'll fire off our cURL request which will in turn trigger our other repository's deployment worflow.</p>\n","date":"2021-06-13","excerpt":"GitHub has no official support for trigger workflows across repos but that won't stop us!","slug":"trigger-github-actions-from-another-repo","title":"Trigger GitHub Actions from another repository"}},"__N_SSG":true}